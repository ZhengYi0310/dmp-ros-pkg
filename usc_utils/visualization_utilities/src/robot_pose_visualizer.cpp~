/*
 * robot_pose_visualizer.cpp
 *
 *  Created on: Jan 21, 2011
 *      Author: kalakris
 */

#include <moveit_msgs/DisplayTrajectory.h>
#include <visualization_utilities/robot_pose_visualizer.h>
#include <robot_info/kdl_conversions.h>

using namespace robot_info;

namespace visualization_utilities
{

    RobotPoseVisualizer::RobotPoseVisualizer(const std::string& topic_name, const robot_model::RobotModelConstPtr &robot_model, const boost::shared_ptr<tf::Transformer> &tf) : current_state_monitor_(robot_model, tf)
    {
        pub_ = node_handle_.advertise<moveit_msgs::DisplayTrajectory>(topic_name, 100, true);
        current_state_monitor_.startStateMonitor("joint_states");
    }

    void RobotPoseVisualizer::publishPose(const std::string& robot_part_name, const std::string& frame_id, const std::vector<double> joint_angles)
    {
        moveit_msgs::DisplayTrajectory display_trajectory;

        display_trajectory.trajectory.resize(1);
        
	display_trajectory.model_id = "arm"; //TODO: check whether that can be anything?

        
        display_trajectory.trajectory[0].joint_trajectory.header.frame_id = frame_id;
        display_trajectory.trajectory[0].joint_trajectory.header.stamp = ros::Time::now();
        std::vector<std::string> joint_names;
        ROS_VERIFY(RobotInfo::getNames(robot_part_name, joint_names));
        display_trajectory.trajectory[0].joint_trajectory.joint_names = joint_names;
        display_trajectory.trajectory[0].joint_trajectory.points.resize(1);
        display_trajectory.trajectory[0].joint_trajectory.points[0].positions = joint_angles;

        sensor_msgs::JointState joint_state;
        std::map<std::string, double> joint_state_values = joint_state_monitor_.getCurrentStateValues();
        unsigned int num_real_joints = joint_state_values.size();

        joint_state.header = display_trajectory.trajectory[0].joint_trajectory.header;
        joint_state.name.resize(num_real_joints);
        joint_state.position.resize(num_real_joints);

        std::map<std::string, double>::iterator it = joint_state_values.begin();
        for (unsigned int i = 0; i < num_real_joints; ++i)
        {
            display_trajectory.trajectory_start.joint_state.name[i] = it->first;
            display_trajectory.trajectory_start.joint_state.position[i] = it->second;
            it++;
        }
        pub_.publish(display_trajectory);
    }

    void RobotPoseVisualizer::publishPose(const std::string& robot_part_name, const std::string& frame_id, const KDL::JntArray& joint_angles)
    {
        std::vector<double> joint_array;
        kdlToVector(joint_angles, joint_array);
        publishPose(robot_part_name, frame_id, joint_array);
    }

}
